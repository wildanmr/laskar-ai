# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bz5K1TmBfrgjBmSX2Isy6V6aoAOWaFXJ

# Predictive Analytics Project: PM2.5 Level Prediction in Beijing
---
* **Nama:** Wildan Mufid Ramadhan
* **Email:** wildan.20nov@gmail.com
* **Dicoding ID:** wildan.20nov@gmail.com

### Latar Belakang

Polusi udara, khususnya partikel PM2.5, telah menjadi masalah serius di banyak kota besar di seluruh dunia, termasuk Beijing. Tingkat PM2.5 yang tinggi dapat berdampak negatif pada kesehatan manusia dan lingkungan. Oleh karena itu, kemampuan untuk memprediksi kadar PM2.5 sangat penting untuk memungkinkan pihak berwenang dan masyarakat mengambil tindakan pencegahan yang tepat.

### Permasalahan

Proyek ini bertujuan untuk mengatasi tiga permasalahan utama:

1.  **Faktor-faktor apa saja yang paling berpengaruh terhadap tingkat polusi PM2.5 di Beijing?**
    *   Analisis ini akan membantu mengidentifikasi variabel-variabel kunci (misalnya, kondisi cuaca, polutan lain) yang memiliki korelasi kuat dengan konsentrasi PM2.5.

2.  **Bagaimana mengembangkan model machine learning untuk memprediksi kadar PM2.5 berdasarkan data cuaca dan polutan lainnya?**
    *   Fokusnya adalah membangun model prediktif yang akurat menggunakan teknik regresi.

3.  **Model prediksi mana yang memberikan hasil terbaik untuk estimasi PM2.5 â€” Regresi Linear atau Random Forest?**
    *   Perbandingan kinerja antara model-model ini akan dilakukan untuk menentukan pendekatan yang paling efektif.

### Problem Statements

*   Tingginya kadar PM2.5 di Beijing memerlukan sistem prediksi yang akurat untuk mitigasi dampak kesehatan dan lingkungan.
*   Kurangnya pemahaman mendalam tentang faktor-faktor pendorong utama polusi PM2.5 menghambat pengembangan strategi pengendalian yang efektif.

### Goals

*   Mengidentifikasi faktor-faktor lingkungan dan meteorologi yang paling signifikan yang mempengaruhi konsentrasi PM2.5.
*   Mengembangkan model machine learning yang mampu memprediksi kadar PM2.5 dengan akurasi tinggi.
*   Membandingkan kinerja model Regresi Linear dan Random Forest untuk menentukan model terbaik untuk prediksi PM2.5.

### Solution Statement

Untuk mencapai tujuan ini, kami akan menerapkan pendekatan machine learning dengan membandingkan beberapa algoritma regresi. Secara spesifik, kami akan:

1.  Menggunakan model **Regresi Linear** sebagai baseline untuk memahami hubungan linier antara fitur dan target.
2.  Menggunakan model **Random Forest Regressor** yang dikenal mampu menangani hubungan non-linier dan interaksi fitur yang kompleks.

Kinerja model akan diukur menggunakan metrik seperti Root Mean Squared Error (RMSE) dan R-squared (R2 Score) untuk memastikan solusi yang terukur dan dapat diandalkan.

## Download dan Load Dataset
"""

!curl -L -o ./beijing-multi-site-air-quality-data.zip https://www.kaggle.com/api/v1/datasets/download/aravindpcoder/beijing-multi-site-air-quality-data
!mkdir ./data
!unzip beijing-multi-site-air-quality-data.zip -d ./data
!rm  beijing-multi-site-air-quality-data.zip

import pandas as pd

df_raw = pd.read_csv("./data/Beijing Multisite air Quality data.csv")
df_raw.head(3)

"""## Data Understanding

Dataset yang digunakan dalam proyek ini adalah "Beijing Multisite Air Quality Data" yang berisi data kualitas udara dan meteorologi dari berbagai stasiun di Beijing. Dataset ini mencakup observasi per jam dari tahun 2013 hingga 2017.

### Informasi Dataset
*   **Dataset:** Beijing Multi-Site Air-Quality Data<br>
*   **URL:** https://www.kaggle.com/datasets/aravindpcoder/beijing-multi-site-air-quality-data<br>
*   **Jumlah Sampel:** 420,768 entri.
*   **Kolom:** 17 kolom, termasuk informasi waktu (tahun, bulan, hari, jam), konsentrasi polutan (PM2.5, PM10, SO2, NO2, CO, O3), data meteorologi (TEMP, PRES, DEWP, RAIN, wd, WSPM), dan nama stasiun.
*   **Tipe Data:** Campuran `int64`, `float64`, dan `object` (untuk `wd` dan `station`).

### Deskripsi Kolom Penting:

*   **PM2.5:** Konsentrasi partikel PM2.5 (target variabel).
*   **PM10:** Konsentrasi partikel PM10.
*   **SO2, NO2, CO, O3:** Konsentrasi polutan gas.
*   **TEMP:** Suhu (Celsius).
*   **PRES:** Tekanan atmosfer (hPa).
*   **DEWP:** Titik embun (Celsius).
*   **RAIN:** Curah hujan (mm).
*   **wd:** Arah angin.
*   **WSPM:** Kecepatan angin (m/s).
*   **station:** Nama stasiun pemantauan.
"""

# Display basic information about the dataset
print("Dataset Info:")
df_raw.info()

# Display the first few rows of the dataset
print("First 5 Rows:")
df_raw.head()

# Display descriptive statistics
print("Descriptive Statistics:")
df_raw.describe()

# Check for missing values
print("Missing Values:")
df_raw.isnull().sum()

# Check unique values in 'station' column
print("Unique Stations:")
print(df_raw['station'].unique())

# Check unique values in 'wd' (wind direction) column
print("Unique Wind Directions:")
print(df_raw['wd'].unique())

"""## Data Preparation
Tahap persiapan data sangat krusial untuk memastikan kualitas data yang masuk ke model machine learning. Langkah-langkah berikut telah dilakukan:
"""

df_prep = df_raw.copy()

"""### Penanganan Missing Values"""

for col in ["PM2.5", "PM10", "SO2", "NO2", "CO", "O3", "TEMP", "PRES", "DEWP", "RAIN", "WSPM"]:
    df_prep[col] = pd.to_numeric(df_prep[col], errors="coerce") # Convert to numeric, coercing errors to NaN
    df_prep[col].fillna(df_prep[col].median(), inplace=True)

df_prep["wd"].fillna(df_prep["wd"].mode()[0], inplace=True)

df_prep.isnull().sum()

"""### Pembuatan Fitur Berbasis Waktu"""

df_prep["date"] = pd.to_datetime(df_prep[["year", "month", "day", "hour"]])
df_prep["day_of_week"] = df_prep["date"].dt.dayofweek
df_prep["day_of_year"] = df_prep["date"].dt.dayofyear
df_prep["week_of_year"] = df_prep["date"].dt.isocalendar().week.astype(int)
df_prep["quarter"] = df_prep["date"].dt.quarter

df_prep.head()

"""### Encoding Fitur Kategorikal"""

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df_prep["wd_encoded"] = le.fit_transform(df_prep["wd"])

df_prep = pd.get_dummies(df_prep, columns=["station"], prefix="station")

df_prep.head()

"""### Feature Scaling"""

from sklearn.preprocessing import StandardScaler

df_prep.drop(columns=["year", "month", "day", "hour", "wd", "date"], inplace=True)

X = df_prep.drop("PM2.5", axis=1)
y = df_prep["PM2.5"]

numerical_cols = ["PM10", "SO2", "NO2", "CO", "O3", "TEMP", "PRES", "DEWP", "RAIN", "WSPM", "day_of_year", "week_of_year"]

scaler = StandardScaler()

X[numerical_cols] = scaler.fit_transform(X[numerical_cols])

X[numerical_cols] = scaler.fit_transform(X[numerical_cols])

X.describe()

"""### Pembagian Data"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=42)

print("\nShape of X_train:", X_train.shape)
print("Shape of X_val:", X_val.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_val:", y_val.shape)
print("Shape of y_test:", y_test.shape)

"""## Modeling

Pada tahap ini, dua jenis model machine learning diimplementasikan untuk memprediksi kadar PM2.5: Regresi Linear dan Random Forest Regressor.
"""

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

"""### Linear Regression"""

from sklearn.linear_model import LinearRegression

print("Training Linear Regression Model...")
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

y_pred_linear = linear_model.predict(X_val)
mse_linear = mean_squared_error(y_val, y_pred_linear)
rmse_linear = np.sqrt(mse_linear)
r2_linear = r2_score(y_val, y_pred_linear)

print(f"Linear Regression - RMSE on Validation Set: {rmse_linear:.4f}")
print(f"Linear Regression - R2 Score on Validation Set: {r2_linear:.4f}")

"""### Random Forest Regressor"""

from sklearn.ensemble import RandomForestRegressor

print("Training Random Forest Regressor Model...")

rf_model = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_val)
mse_rf = mean_squared_error(y_val, y_pred_rf)
rmse_rf = np.sqrt(mse_rf)
r2_rf = r2_score(y_val, y_pred_rf)

print(f"Random Forest - RMSE on Validation Set: {rmse_rf:.4f}")
print(f"Random Forest - R2 Score on Validation Set: {r2_rf:.4f}")

"""## Evaluation

Evaluasi model dilakukan berdasarkan metrik Root Mean Squared Error (RMSE) dan R-squared (R2 Score) pada data validasi. RMSE mengukur rata-rata besarnya kesalahan prediksi model, di mana nilai yang lebih rendah menunjukkan kinerja yang lebih baik. R2 Score menunjukkan proporsi varians dalam variabel dependen yang dapat dijelaskan oleh model, di mana nilai yang lebih tinggi menunjukkan kecocokan model yang lebih baik.

### Hasil Evaluasi pada Data Validasi:

**Linear Regression:**
*   RMSE: 31.6726
*   R2 Score: 0.8453

**Random Forest:**
*   RMSE: 18.0848
*   R2 Score: 0.9495

### Perbandingan dan Pemilihan Model:

Dari hasil di atas, terlihat jelas bahwa model **Random Forest** menunjukkan kinerja yang jauh lebih unggul dibandingkan dengan model Regresi Linear. RMSE Random Forest (18.0848) secara signifikan lebih rendah daripada RMSE Regresi Linear (31.6726), menunjukkan bahwa prediksi Random Forest memiliki kesalahan rata-rata yang lebih kecil. Selain itu, R2 Score Random Forest (0.9495) jauh lebih tinggi daripada Regresi Linear (0.8453), yang berarti model Random Forest mampu menjelaskan hampir 95% variabilitas dalam kadar PM2.5, dibandingkan dengan sekitar 84.5% oleh Regresi Linear.

Berdasarkan perbandingan ini, **model Random Forest dipilih sebagai model terbaik** untuk memprediksi kadar PM2.5 di Beijing di antara model-model yang berhasil dilatih.
"""

