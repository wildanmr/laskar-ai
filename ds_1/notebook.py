# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vdvn8RIQSPvl7vsSC04b_NHuUDk9UQLT

# Pengembangan Model Machine Learning untuk Prediksi Attrition
---
* **Nama:** Wildan Mufid Ramadhan
* **Email:** wildan.20nov@gmail.com
* **Dicoding ID:** wildan.20nov@gmail.com
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib
import numpy as np

"""## 1. Memuat Data"""

df = pd.read_csv("data/employee_data.csv")
df.head()

"""## 2. Pra-pemrosesan Data"""

# Mengisi nilai yang hilang di kolom 'Attrition' dengan 0 (False) dan mengubah ke boolean
df['Attrition'] = df['Attrition'].fillna(0).astype(bool)

# Mengisi nilai yang hilang di kolom 'Age' dengan rata-rata
df['Age'] = df['Age'].fillna(df['Age'].mean())

# Menghapus kolom yang tidak relevan atau memiliki nilai konstan
df = df.drop(columns=['EmployeeCount', 'StandardHours', 'Over18', 'EmployeeId'], errors='ignore')

# Mengidentifikasi kolom kategorikal dan numerik
categorical_cols = df.select_dtypes(include='object').columns
numerical_cols = df.select_dtypes(include=np.number).columns

# Mengkodekan kolom kategorikal menggunakan LabelEncoder
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

df.head()

"""## 3. Pembagian Data (Fitur dan Target)"""

X = df.drop('Attrition', axis=1)
y = df['Attrition']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

"""## 4. Scaling Fitur Numerik"""

scaler = StandardScaler()
X_train[numerical_cols] = scaler.fit_transform(X_train[numerical_cols])
X_test[numerical_cols] = scaler.transform(X_test[numerical_cols])

"""## 5. Pelatihan Model (Logistic Regression)"""

model = LogisticRegression(solver='liblinear', random_state=42)
model.fit(X_train, y_train)

"""## 6. Evaluasi Model"""

y_pred = model.predict(X_test)

print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
print("\nClassification Report:\n")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n")
print(confusion_matrix(y_test, y_pred))

"""## 7. Menyimpan Model dan Scaler"""

joblib.dump(model, 'model/logistic_regression_model.pkl')
joblib.dump(scaler, 'model/scaler.pkl')
joblib.dump(X.columns.tolist(), 'model/model_features.pkl')
joblib.dump(categorical_cols.tolist(), 'model/categorical_cols.pkl')
joblib.dump({col: list(df[col].unique()) for col in categorical_cols}, 'model/label_encoders_classes.pkl')
print("Model, scaler, dan daftar fitur telah disimpan.")

